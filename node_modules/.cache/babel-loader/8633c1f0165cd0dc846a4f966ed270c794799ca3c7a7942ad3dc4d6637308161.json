{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7ba5bd90\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"header\", {\n  class: \"header\"\n}, [/*#__PURE__*/_createElementVNode(\"h1\", null, \"Azure OpenAI ChatGPT Bot\")], -1 /* HOISTED */));\nconst _hoisted_2 = {\n  class: \"content\",\n  ref: \"msgContainer\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"balloon\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  class: \"img-circle\",\n  src: \"openai.png\",\n  alt: \"image\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_6 = {\n  class: \"talk\"\n};\nconst _hoisted_7 = {\n  key: 1\n};\nconst _hoisted_8 = {\n  class: \"balloon balloon-r\"\n};\nconst _hoisted_9 = {\n  class: \"talk talk-r\"\n};\nconst _hoisted_10 = {\n  class: \"footer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"section\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chatMessages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"ul\", {\n      id: \"chat-area\",\n      key: index\n    }, [message.role == 'Bot' ? (_openBlock(), _createElementBlock(\"li\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _createElementVNode(\"p\", _hoisted_6, _toDisplayString(message.msg), 1 /* TEXT */)])])) : (_openBlock(), _createElementBlock(\"li\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"p\", _hoisted_9, _toDisplayString(message.msg), 1 /* TEXT */)])]))]);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createElementVNode(\"footer\", _hoisted_10, [_withDirectives(_createElementVNode(\"input\", {\n    id: \"msg-send\",\n    class: \"msg-input\",\n    placeholder: \"請輸入訊息\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.prompt = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys($event => $options.sendMessage(), [\"enter\"]))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $data.prompt]]), _createElementVNode(\"button\", {\n    class: \"btn-submit\",\n    type: \"button\",\n    onClick: _cache[2] || (_cache[2] = $event => $options.sendMessage())\n  }, \" 傳送 \")])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","class","ref","src","alt","_hoisted_1","_hoisted_2","_createElementBlock","_Fragment","_renderList","$data","chatMessages","message","index","id","key","role","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_toDisplayString","msg","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","placeholder","prompt","$event","onKeyup","_cache","_withKeys","$options","sendMessage","type","onClick"],"sources":["/Users/wilson/projectCode/mylearning/Vue_Azure_OpenAI_ChatGPT/src/App.vue"],"sourcesContent":["<template>\n  <header class=\"header\">\n    <h1>Azure OpenAI ChatGPT Bot</h1>\n  </header>\n  <section class=\"content\" ref=\"msgContainer\">\n    <ul id=\"chat-area\" v-for=\"(message, index) in chatMessages\" :key=\"index\">\n      <li v-if=\"message.role == 'Bot'\">\n        <div class=\"balloon\">\n          <img class=\"img-circle\" src=\"openai.png\" alt=\"image\" />\n          <p class=\"talk\">{{ message.msg }}</p>\n        </div>\n      </li>\n      <li v-else>\n        <div class=\"balloon balloon-r\">\n          <p class=\"talk talk-r\">{{ message.msg }}</p>\n        </div>\n      </li>\n    </ul>\n  </section>\n  <footer class=\"footer\">\n    <input\n      id=\"msg-send\"\n      class=\"msg-input\"\n      placeholder=\"請輸入訊息\"\n      v-model=\"prompt\"\n      v-on:keyup.enter=\"sendMessage()\"\n    >\n    <button class=\"btn-submit\" type=\"button\" @click=\"sendMessage()\">\n      傳送\n    </button>\n  </footer>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { Toast } from './utils/helpers';\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      openaiEndpoint: process.env.VUE_APP_OPENAI_ENDPOINT,\n      openaiModelDeploymentName: process.env.VUE_APP_OPENAI_MODEL_DEPLOYMENT_NAME,\n      openaiKey: process.env.VUE_APP_OPENAI_KEY,\n      prompt: '',\n      chatMessages: [],\n      botMessageArrayIndex: 0,\n    };\n  },\n  mounted() {\n    this.chatMessages.push({\n      msg: '您好，我是 Azure OpenAI 的 ChatGPT，有任何問題都可以問我 ^_^',\n      role: 'Bot',\n    });\n  },\n  watch: {\n    chatMessages: {\n      handler() {\n        window.scrollTo({\n          left: 0,\n          top: document.body.scrollHeight,\n          behavior: 'smooth',\n        });\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    sendMessage() {\n      if (this.prompt !== '') {\n        this.showUserMessage();\n        this.postOpenAI(this.prompt);\n        this.prompt = '';\n      } else {\n        Toast.fire({\n          icon: 'error',\n          title: '請輸入訊息 !',\n        });\n      }\n    },\n    showUserMessage() {\n      this.chatMessages.push({\n        msg: this.prompt,\n        role: 'User',\n      });\n    },\n    showBotMessage(botMessage) {\n      this.chatMessages.push({\n        msg: botMessage,\n        role: 'Bot',\n      });\n      this.botMessageArrayIndex = this.chatMessages.length - 1;\n    },\n    async postOpenAI(userPrompt = '') {\n      this.showBotMessage('思考中 ~');\n      const reqBody = {\n        messages: [\n          {\n            role: 'system',\n            content: '你是一個名叫「OpenAI ChatGPT」的角色。請用小於6歲的孩子能夠聽懂的語言和親切、容易親近的口吻來講話。',\n          },\n          {\n            role: 'user',\n            content: userPrompt,\n          },\n          {\n            role: 'assistant',\n            content: '',\n          },\n        ],\n        temperature: 0.7,\n        top_p: 0.95,\n        frequency_penalty: 0,\n        presence_penalty: 0,\n        max_tokens: 800,\n        stop: null,\n      };\n      try {\n        const res = await axios.post(\n          `${this.openaiEndpoint}openai/deployments/${this.openaiModelDeploymentName}/chat/completions?api-version=2023-03-15-preview`,\n          JSON.stringify(reqBody),\n          {\n            headers: {\n              'content-type': 'application/json',\n              'api-key': this.openaiKey,\n            },\n          },\n        );\n        this.chatMessages[this.botMessageArrayIndex].msg = res.data.choices[0].message.content;\n      } catch (error) {\n        console.log(error.response.data.error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n\n* {\n  margin: 0;\n  padding: 0;\n}\n.header {\n  top: 0;\n  position: sticky;\n  z-index: 1;\n  width: 100%;\n  height: 50px;\n  font-size: 10px;\n  text-align: center;\n  line-height: 50px;\n  background-color: rgb(30, 144, 255);\n  color: white;\n}\n\n.content {\n  width: 100%;\n  min-height: calc(100vh - 100px);\n  margin-bottom: 50px;\n  background-color: lightgray;\n}\n\n#chat-area {\n  padding: 10px;\n  list-style: none;\n}\n\n.balloon {\n  margin: 20px 0;\n  display: flex;\n  align-items: flex-start;\n}\n.balloon-r {\n  margin-right: 15px;\n  justify-content: flex-end;\n}\n\n.img-circle {\n  width: 50px;\n  height: 50px;\n  margin: 0 15px;\n  border-radius: 25px;\n  background-color: white;\n}\n\n.talk {\n  max-width: 500px;\n  padding: 10px;\n  border-radius: 10px;\n  background: white;\n}\n.talk-r {\n  background-color: skyblue;\n}\n\n.footer {\n  position: fixed;\n  z-index: 1;\n  bottom: 0;\n  width: 100%;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n}\n\n.msg-input {\n  width: 70%;\n  margin-right: 10px;\n  padding: 5px 15px;\n  border: 1px solid gray;\n  border-radius: 25px;\n  background-color: whitesmoke;\n}\n\n.btn-submit {\n  padding: 6px;\n  border: none;\n  border-radius: 5px;\n  background-color: deepskyblue;\n  color: white;\n}\n</style>\n"],"mappings":";;gEACEA,mBAAA,CAES;EAFDC,KAAK,EAAC;AAAQ,I,aACpBD,mBAAA,CAAiC,YAA7B,0BAAwB,E;;EAErBC,KAAK,EAAC,SAAS;EAACC,GAAG,EAAC;;;;;;EAGlBD,KAAK,EAAC;AAAS;gEAClBD,mBAAA,CAAuD;EAAlDC,KAAK,EAAC,YAAY;EAACE,GAAG,EAAC,YAAY;EAACC,GAAG,EAAC;;;EAC1CH,KAAK,EAAC;AAAM;;;;;EAIZA,KAAK,EAAC;AAAmB;;EACzBA,KAAK,EAAC;AAAa;;EAKtBA,KAAK,EAAC;AAAQ;;6DAlBtBI,UAES,EACTL,mBAAA,CAcU,WAdVM,UAcU,I,kBAbRC,mBAAA,CAYKC,SAAA,QAAAC,WAAA,CAZyCC,KAAA,CAAAC,YAAY,GAA/BC,OAAO,EAAEC,KAAK;yBAAzCN,mBAAA,CAYK;MAZDO,EAAE,EAAC,WAAW;MAA2CC,GAAG,EAAEF;QACtDD,OAAO,CAACI,IAAI,a,cAAtBT,mBAAA,CAKK,MAAAU,UAAA,GAJHjB,mBAAA,CAGM,OAHNkB,UAGM,GAFJC,UAAuD,EACvDnB,mBAAA,CAAqC,KAArCoB,UAAqC,EAAAC,gBAAA,CAAlBT,OAAO,CAACU,GAAG,iB,sBAGlCf,mBAAA,CAIK,MAAAgB,UAAA,GAHHvB,mBAAA,CAEM,OAFNwB,UAEM,GADJxB,mBAAA,CAA4C,KAA5CyB,UAA4C,EAAAJ,gBAAA,CAAlBT,OAAO,CAACU,GAAG,iB;0DAK7CtB,mBAAA,CAWS,UAXT0B,WAWS,G,gBAVP1B,mBAAA,CAMC;IALCc,EAAE,EAAC,UAAU;IACbb,KAAK,EAAC,WAAW;IACjB0B,WAAW,EAAC,OAAO;+DACVjB,KAAA,CAAAkB,MAAM,GAAAC,MAAA;IACVC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,SAAA,CAAAH,MAAA,IAAQI,QAAA,CAAAC,WAAW;iEADpBxB,KAAA,CAAAkB,MAAM,E,GAGjB5B,mBAAA,CAES;IAFDC,KAAK,EAAC,YAAY;IAACkC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAAL,MAAA,QAAAA,MAAA,MAAAF,MAAA,IAAEI,QAAA,CAAAC,WAAW;KAAI,MAEhE,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}